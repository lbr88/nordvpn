#!/bin/bash
UPDATETYPE=fastest
UDP=false
TCP=false
QUIET=false
COUNTRIES=""
if [[ -r "/etc/default/nordvpn" ]];then
	. /etc/default/nordvpn
fi

tmpdir=$(mktemp -d "/tmp/nordvpn.XXXXXXXXXXXXX")
vpnhttpzip=https://nordvpn.com/api/files/zip 
configdir=/etc/nordvpn
libdir=/var/lib/nordvpn
rundir=/run/nordvpn
vpnzipfile=$libdir/vpns.zip
vpndir=$libdir/vpns
vpnconffile=$configdir/nordvpn.conf
vpnauthuserpassfile=$configdir/login.conf

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}
function msgdie {
	msgerr $@
	exit 1
}
function msgerr {
	echo -e :: $@ >&2
}
function msg {
	if [[ $QUIET == false ]];then echo -e :: $@; fi
}
function cleanupexit {
	popd +0 &>/dev/null
	rm -rf $tmpdir

}
trap cleanupexit EXIT

for d in $configdir $libdir $rundir $vpndir $tmpdir; do
	if [[ ! -d $d ]];then mkdir -p $d; fi
	if [[ ! -w $d ]];then
		msgdie $d not writable;
	fi
done
function printusage {
	echo -e 'usage:\n'
	echo -e '\tnordvpn login'
	echo -e '\t\tEnables autologin\n'
	echo -e '\tnordvpn [-q] [-t] [-u] [-c countrycodes...] download'
	echo -e '\t\tDownload config files from nordvpn. optional: add the countries parameter to only get a specific set of vpns\n'
	echo -e '\t\t-q\tquiet.'
	echo -e '\t\t-t\tuse tcp configs.'
	echo -e '\t\t-u\tuse udp configs. either -u or -t is required or both'
	echo -e '\t\t-c "<countrycodes>" or -c <countrycode> is allowed multiple times for selecting more.'
	echo -e '\t\t\texample -c us -c ca\n\t\t\tif -c is not set all vpns will be added\n'
	echo -e '\tnordvpn [-q] [-f] [-r] select'
	echo -e '\t\tSelect a new config from the available vpns in $vpndir\n'
	echo -e '\t\t-q\tquiet.'
	echo -e '\t\t-f\tselect fastest (default). uses netselect to find the fastest responding host to ICMP.'
	echo -e '\t\t-r\tselect random.\n'
	echo -e '\n'
	echo -e '\tnordvpn reads defaults from /etc/default/nordvpn\n'
}
function printcountries {
	countries=$(ls $vpndir/*.ovpn -1 |while read f;do basename $f | cut -d. -f1| grep -o '^[A-Za-z][A-Za-z]';done |sort -u)
	msg "Countries:\t$countries"
}
function printcountriesvpncount {
	countriesvpncount=$(ls $vpndir/*.ovpn -1 |while read f;do basename $f | cut -d. -f1| grep -o '^[A-Za-z][A-Za-z]';done |sort |uniq -c |awk '{print $2 "("$1")" }')
	msg "Countries:\t$countriesvpncount"
}
function autologin {
	if [[ -w $configdir ]];then
		msg "Warning your username and password will be saved in clear text in $vpnauthuserpassfile chmodded 600(rw for root)"
		read -p "Username: " username
		read -s -p "Password: " password
		echo ""
		echo $username > $vpnauthuserpassfile
		echo $password >> $vpnauthuserpassfile
		chmod 600 $vpnauthuserpassfile
		updatelogin
	fi
}
function updatelogin {
	if [[ -r $vpnauthuserpassfile ]];then
		pushd $vpndir
		for loopconf in *.ovpn; do
			sed -i "s/auth-user-pass\$/auth-user-pass $(basename $vpnauthuserpassfile)/g" $loopconf
		done
		popd
	fi
}
function download {
	#get new
	pushd $tmpdir
	msg Downloading.
	curl -s -o $vpnzipfile -z $vpnzipfile $vpnhttpzip || msgdie Download failed.
	cp $vpnzipfile ./vpn.zip
	if [[ -f vpn.zip ]];then
		msg Unpacking.
		unzip -qq vpn.zip
		rm vpn.zip
		#cleanup old stuff
		pushd $vpndir
		msg Removing old files.
		rm *.ovpn
		popd
		if [[ $TCP == false ]];then rm *tcp*.ovpn; fi
		if [[ $UDP == false ]];then rm *udp*.ovpn; fi
	
		countries="${COUNTRIES[@]}"
		if [[ -z $countries ]];then
			mv *.ovpn $vpndir;
		else
			for c in $countries; do
				mv $c*.ovpn $vpndir
			done
		fi
		msg Changing configs to use autologin.
		updatelogin
	else
		exit 1
	fi
}
function selectconf_random {
	pushd $vpndir
	randomconf=$(ls *.ovpn|sort -R| tail -n 1);
	msg Selected $randomconf. linking to $vpnconffile.
	if [[ -L $vpnconffile ]];then rm $vpnconffile; fi
	ln -s $vpndir/$randomconf $vpnconffile || Error linking.
}
function selectconf_fastest {
	msg Stopping vpn.
	service nordvpn stop
	sleep 5
	msg Pinging servers.
	fastest=$(egrep 'remote [0-9.]*' $vpndir/*.ovpn| cut -d" " -f 2 |xargs netselect -t 50 -vv | awk '{print $2}');
	fastestconf=$(grep $fastest $vpndir/*.ovpn|cut -d: -f1 |xargs basename)
	msg Server with lowest latency: $fastestconf. linking to $vpnconffile.
	if [[ -L $vpnconffile ]];then rm $vpnconffile; fi
	ln -s $vpndir/$fastestconf $vpnconffile || msgerr Error linking.
}
function selectconf {
	case $UPDATETYPE in
		fastest)
			selectconf_fastest
			;;
		random)
			selectconf_random
			;;
	esac
}
function showstatus {
	vpncount=$(ls $vpndir/*.ovpn|wc -l)
	vpncurrent=$(basename $(readlink -f $vpnconffile))
	ip=$(curl -s -o- http://httpbin.org/ip |grep origin |cut -d '"' -f4)
	hostname=$(dig +short -x $ip)
	if [[ -z $hostname ]];then
		provider=$(dig -x $ip |grep SOA | awk '{print $6}'| rev |cut -d. -f-3 |rev)
	else
		provider=$(echo $hostname | rev |cut -d. -f-3 |rev)
	fi
	printcountriesvpncount
	msg "Total:\t$vpncount vpn's"
	msg "Server: $vpncurrent"
	msg "External ip:\t$ip"
	msg "Hostname:\t$hostname"
	msg "Provider:\t$provider"
}
first=true
while getopts ":c:qrftu" opt; do
	case $opt in
		c)
			if [[ $first == true && ! -z $COUNTRIES ]];then
				COUNTRIES="";
				first=false
			fi
			COUNTRIES+=" $OPTARG"
			;;
		q)
			QUIET=true
			;;
		r)
			UPDATETYPE=random
			;;
		f)
			UPDATETYPE=fastest
			;;
		u)
			UDP=true
			;;
		t)
			TCP=true
			;;
    		\?)
			msgerr "Invalid option: -$OPTARG" >&2
			printusage
			exit 1
			;;
		:)
			
  esac
done
shift "$((OPTIND - 1))"
#check to see if they have selected udp or tcp


cmd=$1
case $cmd in
	login)
		login
		;;
	download)

		if [[ $UDP == false && $TCP == false ]]; then
			msgerr "Both UDP and TCP is disabled please pick one or both with -u or -t"
			exit 1
		fi
		download
		cmd=select
		;&
	select)
		selectconf
		cmd=restart
		;&
	restart)
		msg Restarting nordvpn.
		service nordvpn restart
		;;
	stop)
		msg Stopping nordvpn.
		service nordvpn stop
		;;
	start)
		msg Starting nordvpn.
		service nordvpn start
		;;
	status)
		systemctl status --no-pager --full nordvpn
		showstatus
		;;
	*)
		printusage
		;;	
esac
